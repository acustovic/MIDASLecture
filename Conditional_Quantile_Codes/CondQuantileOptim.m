function [betaHat, RQ, initialCond] = CondQuantileOptim(flag, model, theta, r, ...
    empiricalQuantile, rHF, midasOptions)

% Parameters for the optimization routine
MaxIter = 1000;
MaxFunEvals = 1000;
optimOptions = optimset('LargeScale', 'on', 'HessUpdate', 'dfp', ...
    'MaxFunEvals', MaxFunEvals, 'display', 'off', 'MaxIter', MaxIter, ...
    'TolFun', 1e-10, 'TolX', 1e-10);
nOptim = 10;
nInitVec = 1000;
RQfval = zeros(nInitVec, 1);
warning('off');

%% Optimization
% Choose beta and the best initial condition through the loop
% Initialize the vectors according to the number of coefficients
switch lower(flag)
    case 'c'
        % CAViaR
        if (model == 1 || model == 3)
            initialTargetVectors = unifrnd(0, 1, [nInitVec, 3]);
            nInitialCond = 10;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('C', model, ...
                    initialTargetVectors(i, :), theta, r, ...
                    empiricalQuantile, [], [], 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:4);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 3), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('C', model, ...
                    beta, theta, r, empiricalQuantile, [], [], 'RQ'), ...
                    BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('C', model, ...
                        beta, theta, r, empiricalQuantile, [], [], 'RQ'), ...
                        beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('C', ...
                        model, beta, theta, r, empiricalQuantile, ...
                        [], [], 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end 
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:4)', SortedFval(1, 6:8)');
            
        elseif model == 2
            initialTargetVectors = unifrnd(0, 1, [nInitVec, 4]);
            nInitialCond = 15;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('C', model, ...
                    initialTargetVectors(i, :), theta, r, ...
                    empiricalQuantile, [], [], 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:5);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 4), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('C', model, ...
                    beta, theta, r, empiricalQuantile, [], [], 'RQ'), ...
                    BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('C', model, ...
                        beta, theta, r, empiricalQuantile, [], [], 'RQ'), ...
                        beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('C', ...
                        model, beta, theta, r, empiricalQuantile, ...
                        [], [], 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:5)', SortedFval(1, 7:10)');
                       
        else
            initialTargetVectors = [unifrnd(0, 1, [nInitVec, 1]) ...
                20 * rand(nInitVec, 1)];
            nInitialCond = 10;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('C', model, ...
                    initialTargetVectors(i, :), theta, r, ...
                    empiricalQuantile, [], [], 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:3);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 2), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('C', ...
                    model, beta, theta, r, empiricalQuantile, ...
                    [], [], 'RQ'), BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('C', model, ...
                        beta, theta, r, empiricalQuantile, [], [], 'RQ'), ...
                        beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('C', ...
                        model, beta, theta, r, empiricalQuantile, ...
                        [], [], 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:3)', SortedFval(1, 5:6)');
        end
        
    case 'm'
        % MIDAS
        if (model == 1 || model == 3)
            initialTargetVectors = ...
                [unifrnd(0, 1, [nInitVec, 2]) 10 * rand(nInitVec, 1)];
            nInitialCond = 10;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('M', model, ...
                    initialTargetVectors(i, :), theta, r, [], ...
                    rHF, midasOptions, 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:4);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 3), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('M', model, ...
                    beta, theta, r, [], rHF, midasOptions, 'RQ'), ...
                    BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('M', model, ...
                        beta, theta, r, [], rHF, midasOptions, 'RQ'), ...
                        beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('M', ...
                        model, beta, theta, r, [], rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:4)', SortedFval(1, 6:8)');
           
        elseif model == 2
            initialTargetVectors = ...
                [unifrnd(0, 1, [nInitVec, 3]) 10 * rand(nInitVec, 2)];
            nInitialCond = 20;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('M', model, ...
                    initialTargetVectors(i, :), theta, r, [], ...
                    rHF, midasOptions, 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:6);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 5), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('M', model, ...
                    beta, theta, r, [], rHF, midasOptions, 'RQ'), ...
                    BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('M', model, ...
                        beta, theta, r, [], rHF, midasOptions, 'RQ'), ...
                        beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('M', ...
                        model, beta, theta, r, [], rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:6)', SortedFval(1, 8:12)');
        
        else
            initialTargetVectors = [unifrnd(0, 1, [nInitVec, 2]) ...
                10 * rand(nInitVec, 1) 20 * randn(nInitVec, 1)];
            nInitialCond = 15;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('M', model, ...
                    initialTargetVectors(i, :), theta, r, [], ...
                    rHF, midasOptions, 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:5);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 4), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('M', model, ...
                    beta, theta, r, [], rHF, midasOptions, 'RQ'), ...
                    BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('M', model, ...
                        beta, theta, r, [], rHF, midasOptions, 'RQ'), ...
                        beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('M', ...
                        model, beta, theta, r, [], rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:5)', SortedFval(1, 7:10)');
        end
      
    case'h'
        % HYBRID
        if (model == 1 || model == 3)
            initialTargetVectors = [unifrnd(0, 1, [nInitVec, 3]) ...
                10 * rand(nInitVec, 1)];
            nInitialCond = 15;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('H', model, ...
                    initialTargetVectors(i, :), theta, r, ...
                    empiricalQuantile, rHF, midasOptions, 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:5);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 4), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('H', model, ...
                    beta, theta, r, empiricalQuantile, rHF, ...
                    midasOptions, 'RQ'), BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('H', model, ...
                        beta, theta, r, empiricalQuantile, rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('H', ...
                        model, beta, theta, r, empiricalQuantile, rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:5)', SortedFval(1, 7:10)');
            
        elseif model == 2
            initialTargetVectors = [unifrnd(0, 1, [nInitVec, 4]) ...
                10 * rand(nInitVec, 2)];
            nInitialCond = 25;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('H', model, ...
                    initialTargetVectors(i, :), theta, r, ...
                    empiricalQuantile, rHF, midasOptions, 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:7);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 6), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('H', model, ...
                    beta, theta, r, empiricalQuantile, rHF, ...
                    midasOptions, 'RQ'), BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('H', model, ...
                        beta, theta, r, empiricalQuantile, rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('H', ...
                        model, beta, theta, r, empiricalQuantile, rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:7)', SortedFval(1, 9:14)');

        else
          initialTargetVectors = [unifrnd(0, 1, nInitVec) ...
              10 * rand(nInitVec, 1) 20 * rand(nInitVec, 1)];
            nInitialCond = 15;
            for i = 1:nInitVec
                RQfval(i) = RegressionQuantileObj('H', model, ...
                    initialTargetVectors(i, :), theta, r, ...
                    empiricalQuantile, rHF, midasOptions, 'RQ');
            end
            Results = [RQfval, initialTargetVectors];
            SortedResults = sortrows(Results, 1);
            
            BestInitialCond = SortedResults(1:nInitialCond, 2:4);
            [beta, fval, exitflag] = deal(zeros(nInitialCond, 3), ...
                zeros(nInitialCond, 1), zeros(nInitialCond, 1));
            for i = 1:nInitialCond
                [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                    fminsearch(@(beta) RegressionQuantileObj('H', model, ...
                    beta, theta, r, empiricalQuantile, rHF, ...
                    midasOptions, 'RQ'), BestInitialCond(i, :), optimOptions);
                for n = 1:nOptim
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminunc(@(beta) RegressionQuantileObj('H', model, ...
                        beta, theta, r, empiricalQuantile, rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    [beta(i, :), fval(i, 1), exitflag(i, 1)] = ...
                        fminsearch(@(beta) RegressionQuantileObj('H', ...
                        model, beta, theta, r, empiricalQuantile, rHF, ...
                        midasOptions, 'RQ'), beta(i, :), optimOptions);
                    if exitflag(i, 1) == 1
                        break;
                    end
                end
            end
            SortedFval = sortrows([fval, beta, exitflag, BestInitialCond], 1);
            [RQ, betaHat, initialCond] = deal(SortedFval(1, 1), ...
                SortedFval(1, 2:4)', SortedFval(1, 6:8)');      
        end          
end

end